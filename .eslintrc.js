"use strict";

const path = require("path");

const parserOptions = {
    sourceType: "script",

    ecmaVersion: 12,
    ecmaFeatures: {
        globalReturn: false,
        impliedStrict: false,
        jsx: true,
    },
};

const env = {
    es2021: true,
    node: true,
};

const globals = {};

const plugins = ["react"];
const settings = {
    react: {
        version: "detect",
    },
};

const rules = {
    // Possible errors
    "for-direction": "error",
    "getter-return": "error",
    "no-async-promise-executor": "error",
    "no-await-in-loop": "warn",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-console": "error",
    "no-constant-condition": "error",
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-dupe-args": "error",
    "no-dupe-else-if": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-ex-assign": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": [
        "error",
        "all",
        {
            conditionalAssign: false,
            nestedBinaryExpressions: false,
            enforceForArrowConditionals: false,
            ignoreJSX: "multi-line",
        },
    ],
    "no-extra-semi": "error",
    "no-func-assign": "error",
    "no-import-assign": "error",
    "no-inner-declarations": "error",
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": [
        "error",
        {
            skipComments: false,
            skipRegExps: false,
            skipStrings: false,
            skipTemplates: false,
        },
    ],
    "no-loss-of-precision": "error",
    "no-misleading-character-class": "error",
    "no-obj-calls": "error",
    "no-promise-executor-return": "error",
    "no-prototype-builtins": "error",
    "no-regex-spaces": "error",
    "no-setter-return": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-unexpected-multiline": "error",
    "no-unreachable": "error",
    "no-unreachable-loop": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "no-unsafe-optional-chaining": [
        "error",
        {
            disallowArithmeticOperators: true,
        },
    ],
    "no-useless-backreference": "error",
    "require-atomic-updates": "error",
    "use-isnan": "error",
    "valid-typeof": "error",

    // Best practices
    "accessor-pairs": [
        "error",
        {
            getWithoutSet: false,
            setWithoutGet: true,
            enforceForClassMembers: true,
        },
    ],
    "array-callback-return": [
        "error",
        {
            allowImplicit: true,
            checkForEach: true,
        },
    ],
    "block-scoped-var": "error",
    "class-methods-use-this": "error",
    complexity: "off",
    "consistent-return": "error",
    curly: ["error", "all"],
    "default-case": "off",
    "default-case-last": "error",
    "default-param-last": "error",
    "dot-location": ["error", "property"],
    "dot-notation": "error",
    eqeqeq: ["error", "always"],
    "grouped-accessor-pairs": ["error", "getBeforeSet"],
    "guard-for-in": "error",
    "max-classes-per-file": "off",
    "no-alert": "error",
    "no-caller": "error",
    "no-case-declarations": "error",
    "no-constructor-return": "error",
    "no-div-regex": "off",
    "no-else-return": [
        "error",
        {
            allowElseIf: false,
        },
    ],
    "no-empty-function": "error",
    "no-empty-pattern": "error",
    "no-eq-null": "off",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-fallthrough": "error",
    "no-floating-decimal": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": "error",
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-invalid-this": "error",
    "no-iterator": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-magic-numbers": "off",
    "no-multi-spaces": [
        "error",
        {
            ignoreEOLComments: false,
            exceptions: {
                BinaryExpression: false,
                ImportDeclaration: false,
                Property: false,
                VariableDeclarator: false,
            },
        },
    ],
    "no-multi-str": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-nonoctal-decimal-escape": "error",
    "no-octal-escape": "error",
    "no-param-reassign": [
        "error",
        {
            props: true,
        },
    ],
    "no-proto": "error",
    "no-redeclare": "error",
    "no-restricted-properties": "off",
    "no-return-assign": ["error", "always"],
    "no-return-await": "off",
    "no-script-url": "error",
    "no-self-assign": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "error",
    "no-unused-expressions": "error",
    "no-unused-labels": "off",
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-concat": "error",
    "no-useless-escape": "error",
    "no-useless-return": "error",
    "no-void": "error",
    "no-warning-comments": "warn",
    "no-with": "error",
    "prefer-named-capture-group": "error",
    "prefer-promise-reject-errors": "error",
    "prefer-regex-literals": "error",
    radix: ["error", "always"],
    "require-await": "off",
    "require-unicode-regexp": "error",
    "vars-on-top": "error",
    "wrap-iife": [
        "error",
        "inside",
        {
            functionPrototypeMethods: true,
        },
    ],
    yoda: [
        "error",
        "never",
        {
            exceptRange: true,
            onlyEquality: false,
        },
    ],

    // Strict mode
    strict: ["error", "global"],

    // Variables
    "init-declarations": "off",
    "no-delete-var": "error",
    "no-label-var": "off",
    "no-restricted-globals": "error",
    "no-shadow": "error",
    "no-shadow-restricted-names": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-undefined": "error",
    "no-unused-vars": [
        "error",
        {
            args: "after-used",
            caughtErrors: "all",
        },
    ],
    "no-use-before-define": "error",

    // Stylistic issues
    "array-bracket-newline": [
        "error",
        {
            multiline: true,
        },
    ],
    "array-bracket-spacing": "error",
    "array-element-newline": ["error", "consistent"],
    "block-spacing": "error",
    "brace-style": "error",
    camelcase: "error",
    "capitalized-comments": [
        "error",
        "always",
        {
            ignoreConsecutiveComments: true,
        },
    ],
    "comma-dangle": ["error", "always-multiline"],
    "comma-spacing": "error",
    "comma-style": "error",
    "computed-property-spacing": "error",
    "consistent-this": ["error", "that"],
    "eol-last": ["error", "never"],
    "func-call-spacing": "error",
    "func-name-matching": "off",
    "func-names": "off",
    "func-style": "error",
    "function-call-argument-newline": ["error", "consistent"],
    "function-paren-newline": "error",
    "id-denylist": "off",
    "id-length": [
        "error",
        {
            exceptions: ["_", "i", "j", "x", "y", "z"],
        },
    ],
    "id-match": "off",
    "implicit-arrow-linebreak": "error",
    indent: [
        "error",
        4,
        {
            SwitchCase: 1,
        },
    ],
    "jsx-quotes": "error",
    "key-spacing": "error",
    "keyword-spacing": "error",
    "line-comment-position": "error",
    "linebreak-style": ["error"],
    "lines-around-comment": [
        "error",
        {
            beforeBlockComment: true,
            beforeLineComment: true,
            allowBlockStart: true,
            allowBlockEnd: false,
            allowObjectStart: true,
            allowObjectEnd: false,
            allowArrayStart: true,
            allowArrayEnd: false,
            allowClassStart: true,
            allowClassEnd: false,
            applyDefaultIgnorePatterns: true,
        },
    ],
    "lines-between-class-members": [
        "error",
        "always",
        {
            exceptAfterSingleLine: true,
        },
    ],
    "max-depth": "off",
    "max-len": "off",
    "max-lines": "off",
    "max-nested-callbacks": "off",
    "max-params": "off",
    "max-statements": "off",
    "max-statements-per-line": "error",
    "multiline-comment-style": ["error", "separate-lines"],
    "multiline-ternary": ["error", "always-multiline"],
    "new-cap": "error",
    "new-parens": "error",
    "newline-per-chained-call": "error",
    "no-array-constructor": "error",
    "no-bitwise": [
        "error",
        {
            allow: [],
            int32Hint: false,
        },
    ],
    "no-continue": "off",
    "no-inline-comments": "error",
    "no-lonely-if": "error",
    "no-mixed-operators": "error",
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-assign": "error",
    "no-multiple-empty-lines": [
        "error",
        {
            max: 1,
            maxEOF: 1,
            maxBOF: 0,
        },
    ],
    "no-negated-condition": "off",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-plusplus": "off",
    "no-restricted-syntax": "off",
    "no-tabs": "error",
    "no-ternary": "off",
    "no-trailing-spaces": "error",
    "no-underscore-dangle": [
        "error",
        {
            enforceInMethodNames: true,
        },
    ],
    "no-unneeded-ternary": "error",
    "no-whitespace-before-property": "error",
    "nonblock-statement-body-position": ["error", "below"],
    "object-curly-newline": [
        "error",
        {
            minProperties: 2,
            consistent: true,
        },
    ],
    "object-curly-spacing": [
        "error",
        "always",
        {
            arraysInObjects: false,
            objectsInObjects: false,
        },
    ],
    "object-property-newline": [
        "error",
        {
            allowAllPropertiesOnSameLine: true,
        },
    ],
    "one-var": ["error", "never"],
    "one-var-declaration-per-line": "off",
    "operator-assignment": "error",
    "operator-linebreak": ["error", "after"],
    "padded-blocks": ["error", "never"],
    "padding-line-between-statements": [
        "error",
        {
            blankLine: "always", prev: "*", next: "return",
        },
        {
            blankLine: "always", prev: ["const", "let", "var"], next: "*",
        },
        {
            blankLine: "always", prev: "*", next: ["const", "let", "var"],
        },
        {
            blankLine: "always", prev: "*", next: ["case", "default"],
        },
        {
            blankLine: "any", prev: ["const", "let", "var"], next: ["const", "let", "var"],
        },
    ],
    "prefer-exponentiation-operator": "error",
    "prefer-object-spread": "error",
    "quote-props": [
        "error",
        "as-needed",
        {
            keywords: true,
            numbers: true,
        },
    ],
    quotes: ["error", "double"],
    semi: [
        "error",
        "always",
        {
            omitLastInOneLineBlock: false,
        },
    ],
    "semi-spacing": "error",
    "semi-style": "error",
    "sort-keys": "off",
    "sort-vars": "off",
    "space-before-blocks": "error",
    "space-before-function-paren": "error",
    "space-in-parens": "error",
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": ["error", "always"],
    "switch-colon-spacing": "error",
    "template-tag-spacing": "error",
    "unicode-bom": "error",
    "wrap-regex": "error",

    // ECMAScript6
    "arrow-body-style": ["error", "as-needed"],
    "arrow-parens": ["error", "as-needed"],
    "arrow-spacing": "error",
    "constructor-super": "error",
    "generator-star-spacing": ["error", "both"],
    "no-class-assign": "error",
    "no-confusing-arrow": "off",
    "no-const-assign": "error",
    "no-dupe-class-members": "error",
    "no-duplicate-imports": [
        "error",
        {
            includeExports: true,
        },
    ],
    "no-new-symbol": "error",
    "no-restricted-imports": "off",
    "no-restricted-exports": "off",
    "no-this-before-super": "off",
    "no-useless-computed-key": [
        "error",
        {
            enforceForClassMembers: true,
        },
    ],
    "no-useless-constructor": "error",
    "no-useless-rename": "error",
    "no-var": "error",
    "object-shorthand": [
        "error",
        "always",
        {
            avoidExplicitReturnArrows: true,
        },
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": [
        "error",
        {
            destructuring: "any",
            ignoreReadBeforeAssign: true,
        },
    ],
    "prefer-destructuring": [
        "error",
        {
            object: true,
            array: false,
        },
    ],
    "prefer-numeric-literals": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",
    "require-yield": "error",
    "rest-spread-spacing": "error",
    "sort-imports": [
        "error",
        {
            ignoreCase: true,
            memberSyntaxSortOrder: ["none", "all", "multiple", "single"],
        },
    ],
    "symbol-description": "error",
    "template-curly-spacing": "error",
    "yield-star-spacing": ["error", "both"],

    // eslint-plugin-react
    "react/boolean-prop-naming": "off",
    "react/button-has-type": "error",
    "react/default-props-match-prop-types": "off",
    "react/destructuring-assignment": ["error", "always"],
    "react/display-name": "off",
    "react/forbid-component-props": "off",
    "react/forbid-dom-props": "off",
    "react/forbid-elements": "off",
    "react/forbid-foreign-prop-types": "off",
    "react/function-component-definition": [
        "error",
        {
            namedComponents: "function-expression",
            unnamedComponents: "function-expression",
        },
    ],
    "react/no-access-state-in-setstate": "error",
    "react/no-adjacent-inline-elements": "error",
    "react/no-array-index-key": "error",
    "react/no-children-prop": "error",
    "react/no-danger": "error",
    "react/no-danger-with-children": "error",
    "react/no-deprecated": "error",
    "react/no-did-mount-set-state": "error",
    "react/no-did-update-set-state": "error",
    "react/no-will-update-set-state": "error",
    "react/no-direct-mutation-state": "error",
    "react/no-find-dom-node": "error",
    "react/no-is-mounted": "error",
    "react/no-multi-comp": "off",
    "react/no-redundant-should-component-update": "error",
    "react/no-render-return-value": "error",
    "react/no-set-state": "off",
    "react/no-string-refs": [
        "error",
        {
            noTemplateLiterals: true,
        },
    ],
    "react/no-this-in-sfc": "error",
    "react/no-typos": "error",
    "react/no-unescaped-entities": "error",
    "react/no-unknown-property": "error",
    "react/no-unsafe": "error",
    "react/no-unstable-nested-components": "error",
    "react/no-unused-prop-types": "error",
    "react/no-unused-state": "error",
    "react/prefer-es6-class": ["error", "always"],
    "react/prefer-exact-props": "off",
    "react/prefer-read-only-props": "off",
    "react/prefer-stateless-function": "error",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "react/require-default-props": "off",
    "react/require-optimization": "off",
    "react/require-render-return": "error",
    "react/self-closing-comp": "error",
    "react/sort-comp": [
        "error",
        {
            groups: {
                rendering: ["/^render.+$/", "render"],
            },
        },
    ],
    "react/sort-prop-types": [
        "error",
        {
            callbacksLast: true,
            ignoreCase: true,
            requiredFirst: true,
            sortShapeProp: true,
            noSortAlphabetically: true,
        },
    ],
    "react/state-in-constructor": "error",
    "react/static-property-placement": "off",
    "react/style-prop-object": "error",
    "react/void-dom-elements-no-children": "error",
    "react/jsx-boolean-value": "error",
    "react/jsx-child-element-spacing": "error",
    "react/jsx-closing-bracket-location": "error",
    "react/jsx-closing-tag-location": "error",
    "react/jsx-curly-brace-presence": ["error", "always"],
    "react/jsx-curly-newline": "error",
    "react/jsx-curly-spacing": [
        "error",
        {
            when: "never",
            children: true,
        },
    ],
    "react/jsx-equals-spacing": "error",
    "react/jsx-filename-extension": [
        "error",
        {
            extensions: [".jsx", ".tsx"],
        },
    ],
    "react/jsx-first-prop-new-line": "error",
    "react/jsx-fragments": ["error", "element"],
    "react/jsx-handler-names": "error",
    "react/jsx-indent": [
        "error",
        4,
        {
            checkAttributes: true,
            indentLogicalExpressions: true,
        },
    ],
    "react/jsx-indent-props": ["error", 4],
    "react/jsx-key": [
        "error",
        {
            checkFragmentShorthand: true,
            checkKeyMustBeforeSpread: true,
        },
    ],
    "react/jsx-max-depth": "off",
    "react/jsx-max-props-per-line": "error",
    "react/jsx-newline": "off",
    "react/jsx-no-bind": "error",
    "react/jsx-no-comment-textnodes": "error",
    "react/jsx-no-constructed-context-values": "error",
    "react/jsx-no-duplicate-props": "error",
    "react/jsx-no-literals": "off",
    "react/jsx-no-script-url": "error",
    "react/jsx-no-target-blank": [
        "error",
        {
            allowReferrer: false,
            enforceDynamicLinks: "always",
            warnOnSpreadAttributes: true,
        },
    ],
    "react/jsx-no-undef": [
        "error",
        {
            allowGlobals: false,
        },
    ],
    "react/jsx-no-useless-fragment": "error",
    "react/jsx-one-expression-per-line": "error",
    "react/jsx-pascal-case": "error",
    "react/jsx-props-no-multi-spaces": "error",
    "react/jsx-props-no-spreading": "off",
    "react/jsx-sort-default-props": "off",
    "react/jsx-sort-props": "off",
    "react/jsx-tag-spacing": [
        "error",
        {
            beforeClosing: "never",
        },
    ],
    "react/jsx-uses-react": "off",
    "react/jsx-uses-vars": "error",
    "react/jsx-wrap-multilines": [
        "error",
        {
            declaration: "parens-new-line",
            assignment: "parens-new-line",
            "return": "parens-new-line",
            arrow: "parens-new-line",
        },
    ],
};

const overrides = [
    {
        files: ["*.ts", "*.tsx"],
        parser: "@typescript-eslint/parser",
        parserOptions: {
            ...parserOptions,
            sourceType: "module",
            project: path.join(".", "tsconfig.json"),
        },
        globals: {
            ...globals,
            NodeJS: true,
        },
        plugins: [...plugins, "@typescript-eslint", "deprecation"],
        rules: {
            // Typescript
            "@typescript-eslint/adjacent-overload-signatures": "error",
            "@typescript-eslint/array-type": [
                "error",
                {
                    "default": "array",
                },
            ],
            "@typescript-eslint/await-thenable": "error",
            "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                    "ts-expect-error": true,
                    "ts-ignore": true,
                    "ts-nocheck": true,
                    "ts-check": false,
                },
            ],
            "@typescript-eslint/ban-tslint-comment": "error",
            "@typescript-eslint/ban-types": "error",
            "@typescript-eslint/class-literal-property-style": "error",
            "@typescript-eslint/consistent-indexed-object-style": "error",
            "@typescript-eslint/consistent-type-assertions": "error",
            "@typescript-eslint/consistent-type-definitions": "off",
            "@typescript-eslint/consistent-type-imports": [
                "error",
                {
                    prefer: "no-type-imports",
                },
            ],
            "@typescript-eslint/explicit-function-return-type": [
                "error",
                {
                    allowExpressions: true,
                    allowTypedFunctionExpressions: false,
                    allowHigherOrderFunctions: false,
                    allowDirectConstAssertionInArrowFunctions: false,
                    allowConciseArrowFunctionExpressionsStartingWithVoid: false,
                },
            ],
            "@typescript-eslint/explicit-member-accessibility": "error",
            "@typescript-eslint/explicit-module-boundary-types": "off",
            "@typescript-eslint/member-delimiter-style": [
                "error",
                {
                    multiline: {
                        delimiter: "comma",
                        requireLast: true,
                    },
                    singleline: {
                        delimiter: "comma",
                        requireLast: false,
                    },
                    multilineDetection: "brackets",
                },
            ],
            "@typescript-eslint/member-ordering": "off",
            "@typescript-eslint/method-signature-style": "error",
            camelcase: "off",
            "@typescript-eslint/naming-convention": [
                "error",
                {
                    selector: ["variableLike", "memberLike"],
                    format: ["strictCamelCase", "StrictPascalCase"],
                    filter: {
                        regex: "^__html$", match: false,
                    },
                },
                {
                    selector: ["typeLike"],
                    format: ["StrictPascalCase"],
                },
                {
                    selector: ["typeParameter"],
                    format: ["StrictPascalCase"],
                    prefix: ["T"],
                },
            ],
            "@typescript-eslint/no-base-to-string": "error",
            "@typescript-eslint/no-confusing-non-null-assertion": "error",
            "@typescript-eslint/no-confusing-void-expression": "error",
            "@typescript-eslint/no-dynamic-delete": "error",
            "@typescript-eslint/no-explicit-any": "error",
            "@typescript-eslint/no-extra-non-null-assertion": "error",
            "@typescript-eslint/no-extraneous-class": "error",
            "@typescript-eslint/no-floating-promises": [
                "error",
                {
                    ignoreVoid: false,
                },
            ],
            "@typescript-eslint/no-for-in-array": "error",
            "@typescript-eslint/no-implicit-any-catch": "error",
            "@typescript-eslint/no-inferrable-types": "error",
            "@typescript-eslint/no-invalid-void-type": "error",
            "@typescript-eslint/no-meaningless-void-operator": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-misused-promises": "error",
            "@typescript-eslint/no-namespace": "error",
            "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
            "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
            "@typescript-eslint/no-non-null-assertion": "error",
            "@typescript-eslint/no-parameter-properties": "off",
            "@typescript-eslint/no-require-imports": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-type-alias": "off",
            "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
            "@typescript-eslint/no-unnecessary-condition": "error",
            "@typescript-eslint/no-unnecessary-qualifier": "error",
            "@typescript-eslint/no-unnecessary-type-arguments": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unnecessary-type-constraint": "error",
            "@typescript-eslint/no-unsafe-argument": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "@typescript-eslint/no-var-requires": "error",
            "@typescript-eslint/non-nullable-type-assertion-style": "off",
            "@typescript-eslint/prefer-as-const": "error",
            "@typescript-eslint/prefer-enum-initializers": "error",
            "@typescript-eslint/prefer-for-of": "error",
            "@typescript-eslint/prefer-function-type": "off",
            "@typescript-eslint/prefer-includes": "error",
            "@typescript-eslint/prefer-literal-enum-member": "error",
            "@typescript-eslint/prefer-namespace-keyword": "off",
            "@typescript-eslint/prefer-nullish-coalescing": "error",
            "@typescript-eslint/prefer-optional-chain": "error",
            "@typescript-eslint/prefer-readonly": [
                "error",
                {
                    onlyInlineLambdas: true,
                },
            ],
            "@typescript-eslint/prefer-readonly-parameter-types": "off",
            "@typescript-eslint/prefer-reduce-type-parameter": "error",
            "@typescript-eslint/prefer-regexp-exec": "error",
            "@typescript-eslint/prefer-return-this-type": "error",
            "@typescript-eslint/prefer-string-starts-ends-with": "error",
            "@typescript-eslint/prefer-ts-expect-error": "error",
            "@typescript-eslint/promise-function-async": "error",
            "@typescript-eslint/require-array-sort-compare": "error",
            "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                    checkCompoundAssignments: true,
                },
            ],
            "@typescript-eslint/restrict-template-expressions": "off",
            "@typescript-eslint/sort-type-union-intersection-members": "off",
            "@typescript-eslint/strict-boolean-expressions": "off",
            "@typescript-eslint/switch-exhaustiveness-check": "error",
            "@typescript-eslint/triple-slash-reference": "error",
            "@typescript-eslint/type-annotation-spacing": "error",
            "@typescript-eslint/typedef": "off",
            "@typescript-eslint/unbound-method": [
                "error",
                {
                    ignoreStatic: true,
                },
            ],
            "@typescript-eslint/unified-signatures": "error",

            // Extension rules
            "brace-style": "off",
            "@typescript-eslint/brace-style": "error",
            "comma-dangle": "off",
            "@typescript-eslint/comma-dangle": ["error", "always-multiline"],
            "comma-spacing": "off",
            "@typescript-eslint/comma-spacing": "error",
            "default-param-last": "off",
            "@typescript-eslint/default-param-last": "error",
            "dot-notation": "off",
            "@typescript-eslint/dot-notation": "error",
            "func-call-spacing": "off",
            "@typescript-eslint/func-call-spacing": "error",
            indent: "off",
            "@typescript-eslint/indent": [
                "error",
                4,
                {
                    SwitchCase: 1,
                },
            ],
            "init-declarations": "off",
            "@typescript-eslint/init-declarations": "off",
            "keyword-spacing": "off",
            "@typescript-eslint/keyword-spacing": "error",
            "lines-between-class-members": "off",
            "@typescript-eslint/lines-between-class-members": [
                "error",
                "always",
                {
                    exceptAfterSingleLine: true,
                    exceptAfterOverload: false,
                },
            ],
            "no-array-constructor": "off",
            "@typescript-eslint/no-array-constructor": "error",
            "no-dupe-class-members": "off",
            "@typescript-eslint/no-dupe-class-members": "off",
            "no-duplicate-imports": "off",
            "@typescript-eslint/no-duplicate-imports": [
                "error",
                {
                    includeExports: true,
                },
            ],
            "no-empty-function": "off",
            "@typescript-eslint/no-empty-function": "error",
            "no-extra-parens": "off",
            "@typescript-eslint/no-extra-parens": [
                "error",
                "all",
                {
                    conditionalAssign: false,
                    nestedBinaryExpressions: false,
                    enforceForArrowConditionals: false,
                    ignoreJSX: "multi-line",
                },
            ],
            "no-extra-semi": "off",
            "@typescript-eslint/no-extra-semi": "error",
            "no-implied-eval": "off",
            "@typescript-eslint/no-implied-eval": "error",
            "no-invalid-this": "off",
            "@typescript-eslint/no-invalid-this": "error",
            "no-loop-func": "off",
            "@typescript-eslint/no-loop-func": "error",
            "no-loss-of-precision": "off",
            "@typescript-eslint/no-loss-of-precision": "error",
            "no-magic-numbers": "off",
            "@typescript-eslint/no-magic-numbers": "off",
            "no-redeclare": "off",
            "@typescript-eslint/no-redeclare": "error",
            "no-restricted-imports": "off",
            "@typescript-eslint/no-restricted-imports": "off",
            "no-shadow": "off",
            "@typescript-eslint/no-shadow": "error",
            "no-throw-literal": "off",
            "@typescript-eslint/no-throw-literal": "error",
            "no-unused-expressions": "off",
            "@typescript-eslint/no-unused-expressions": "error",
            "no-unused-vars": "off",
            "@typescript-eslint/no-unused-vars": [
                "error", {
                    args: "after-used",
                    caughtErrors: "all",
                },
            ],
            "no-use-before-define": "off",
            "@typescript-eslint/no-use-before-define": "off",
            "no-useless-constructor": "off",
            "@typescript-eslint/no-useless-constructor": "error",
            "object-curly-spacing": "off",
            "@typescript-eslint/object-curly-spacing": [
                "error", "always", {
                    arraysInObjects: false,
                    objectsInObjects: false,
                },
            ],
            "padding-line-between-statements": "off",
            "@typescript-eslint/padding-line-between-statements": [
                "error",
                {
                    blankLine: "always", prev: "*", next: "return",
                },
                {
                    blankLine: "always", prev: ["const", "let", "var"], next: "*",
                },
                {
                    blankLine: "always", prev: "*", next: ["const", "let", "var"],
                },
                {
                    blankLine: "always", prev: "*", next: ["case", "default"],
                },
                {
                    blankLine: "any", prev: ["const", "let", "var"], next: ["const", "let", "var"],
                },
            ],
            quotes: "off",
            "@typescript-eslint/quotes": ["error", "double"],
            "require-await": "off",
            "@typescript-eslint/require-await": "off",
            "no-return-await": "off",
            "@typescript-eslint/return-await": "off",
            semi: "off",
            "@typescript-eslint/semi": [
                "error", "always", {
                    omitLastInOneLineBlock: false,
                },
            ],
            "space-before-function-paren": "off",
            "@typescript-eslint/space-before-function-paren": "error",
            "space-infix-ops": "off",
            "@typescript-eslint/space-infix-ops": "error",

            // Deprecation
            "deprecation/deprecation": "error",

            // Typescript handles itself
            "no-shadow-restricted-names": "off",
            "no-undefined": "off",
            "no-undef": "off",
            "no-delete-var": "off",
            "no-with": "off",
            "constructor-super": "off",
            "no-class-assign": "off",
            "no-const-assign": "off",
            "no-new-symbol": "off",
            "getter-return": "off",
            "no-dupe-args": "off",
            "no-dupe-keys": "off",
            "no-func-assign": "off",
            "no-import-assign": "off",
            "no-obj-calls": "off",
            "no-setter-return": "off",
            "no-unexpected-multiline": "off",
            "no-unsafe-negation": "off",
            "valid-typeof": "off",
        },
    },
    {
        files: ["*.spec.ts", "*.spec.tsx", "*.test.ts", "*.test.tsx", "*.spec.js", "*.spec.jsx", "*.test.js", "*.test.jsx"],
        plugins: ["jest"],
        rules: {
            // eslint-plugin-jest
            "jest/consistent-test-it": "error",
            "jest/expect-expect": "error",
            "jest/lowercase-name": [
                "error", {
                    ignore: ["describe"],
                },
            ],
            "jest/no-alias-methods": "error",
            "jest/no-commented-out-tests": "error",
            "jest/no-conditional-expect": "error",
            "jest/no-deprecated-functions": "error",
            "jest/no-disabled-tests": "warn",
            "jest/no-done-callback": "error",
            "jest/no-duplicate-hooks": "error",
            "jest/no-focused-tests": "warn",
            "jest/no-hooks": "off",
            "jest/no-identical-title": "error",
            "jest/no-if": "error",
            "jest/no-interpolation-in-snapshots": "error",
            "jest/no-jasmine-globals": "error",
            "jest/no-jest-import": "error",
            "jest/no-large-snapshots": "off",
            "jest/no-mocks-import": "error",
            "jest/no-restricted-matchers": "off",
            "jest/no-standalone-expect": "error",
            "jest/no-test-prefixes": "error",
            "jest/no-test-return-statement": "error",
            "jest/prefer-called-with": "error",
            "jest/prefer-expect-assertions": "off",
            "jest/prefer-hooks-on-top": "error",
            "jest/prefer-spy-on": "error",
            "jest/prefer-strict-equal": "error",
            "jest/prefer-to-be-null": "error",
            "jest/prefer-to-be-undefined": "error",
            "jest/prefer-to-contain": "error",
            "jest/prefer-to-have-length": "error",
            "jest/prefer-todo": "warn",
            "jest/require-to-throw-message": "error",
            "jest/require-top-level-describe": "error",
            "@typescript-eslint/unbound-method": "off",
            "jest/unbound-method": "error",
            "jest/valid-describe": "error",
            "jest/valid-expect": "error",
            "jest/valid-expect-in-promise": "error",
            "jest/valid-title": "error",
        },
    },
];

module.exports = {
    parserOptions,
    env,
    globals,
    plugins,
    settings,
    rules,
    overrides,
};